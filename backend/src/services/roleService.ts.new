import prisma from '../config/prisma.js';
import { BadRequestError, NotFoundError } from '../utils/errors.js';
import * as roleRepository from '../repositories/roleRepository.js';
import type { Role, Permission } from '../models/index.js';

/**
 * Get all roles with their permissions
 */
export async function getAllRoles() {
  // Get all roles from repository
  const roles = await prisma.role.findMany({
    include: {
      rolePermissions: {
        include: {
          permission: true
        }
      }
    }
  });

  // Note: We're not using roleRepository.getAllRoles() here because we need to include permissions

  // Format the response to be more user-friendly
  return roles.map((role: any) => ({
    id: role.id,
    name: role.name,
    description: role.description,
    isDefault: role.isDefault,
    permissions: role.rolePermissions.map((rp: any) => ({
      id: rp.permission.id,
      name: rp.permission.name,
      description: rp.permission.description,
      category: rp.permission.category,
      action: rp.permission.action
    })),
    createdAt: role.createdAt,
    updatedAt: role.updatedAt
  }));
}

/**
 * Get a role by ID with its permissions
 */
export async function getRoleById(id: string) {
  // Get role with permissions
  const role = await prisma.role.findUnique({
    where: { id },
    include: {
      rolePermissions: {
        include: {
          permission: true
        }
      }
    }
  });

  // Note: We're not using roleRepository.getRoleById() here because we need to include permissions

  if (!role) {
    throw new NotFoundError('Role not found');
  }

  // Format the response
  return {
    id: role.id,
    name: role.name,
    description: role.description,
    isDefault: role.isDefault,
    permissions: role.rolePermissions.map((rp: any) => ({
      id: rp.permission.id,
      name: rp.permission.name,
      description: rp.permission.description,
      category: rp.permission.category,
      action: rp.permission.action
    })),
    createdAt: role.createdAt,
    updatedAt: role.updatedAt
  };
}

/**
 * Create a new role
 */
export async function createRole(data: {
  name: string;
  description?: string;
  isDefault?: boolean;
  permissionIds?: string[];
}) {
  const { name, description, isDefault = false, permissionIds = [] } = data;

  if (!name) {
    throw new BadRequestError('Role name is required');
  }

  // Check if role with the same name already exists
  const existingRole = await roleRepository.getRoleByName(name);

  if (existingRole) {
    throw new BadRequestError('Role with this name already exists');
  }

  // Create the role
  const role = await roleRepository.createRole({
    name,
    description,
    isDefault
  });

  // Assign permissions if provided
  if (permissionIds.length > 0) {
    // Verify all permissions exist
    const permissions = await prisma.permission.findMany({
      where: {
        id: { in: permissionIds }
      }
    });

    if (permissions.length !== permissionIds.length) {
      throw new BadRequestError('Some permission IDs are invalid');
    }

    // Create role-permission associations
    await Promise.all(permissionIds.map(permissionId =>
      prisma.rolePermission.create({
        data: {
          roleId: role.id,
          permissionId
        }
      })
    ));
  }

  // Return the created role with permissions
  return getRoleById(role.id);
}

/**
 * Update a role
 */
export async function updateRole(id: string, data: {
  name?: string;
  description?: string;
  isDefault?: boolean;
  permissionIds?: string[];
}) {
  const { name, description, isDefault, permissionIds } = data;

  // Check if role exists
  const existingRole = await roleRepository.getRoleById(id);

  if (!existingRole) {
    throw new NotFoundError('Role not found');
  }

  // Check if name is unique if changing
  if (name && name !== existingRole.name) {
    const roleWithSameName = await roleRepository.getRoleByName(name);

    if (roleWithSameName) {
      throw new BadRequestError('Role with this name already exists');
    }
  }

  // Update role
  await roleRepository.updateRole(id, {
    ...(name && { name }),
    ...(description !== undefined && { description }),
    ...(isDefault !== undefined && { isDefault })
  });

  // Update permissions if provided
  if (permissionIds) {
    // Verify all permissions exist
    const permissions = await prisma.permission.findMany({
      where: {
        id: { in: permissionIds }
      }
    });

    if (permissions.length !== permissionIds.length) {
      throw new BadRequestError('Some permission IDs are invalid');
    }

    // Delete existing role-permission associations
    await prisma.rolePermission.deleteMany({
      where: { roleId: id }
    });

    // Create new role-permission associations
    await Promise.all(permissionIds.map(permissionId =>
      prisma.rolePermission.create({
        data: {
          roleId: id,
          permissionId
        }
      })
    ));
  }

  // Return the updated role with permissions
  return getRoleById(id);
}

/**
 * Delete a role
 */
export async function deleteRole(id: string): Promise<void> {
  // Check if role exists
  const existingRole = await roleRepository.getRoleById(id);

  if (!existingRole) {
    throw new NotFoundError('Role not found');
  }

  // Check if role is in use
  const userRoleCount = await prisma.userRole.count({
    where: { roleId: id }
  });

  if (userRoleCount > 0) {
    throw new BadRequestError('Cannot delete role as it is assigned to users');
  }

  // Delete role-permission associations first
  await prisma.rolePermission.deleteMany({
    where: { roleId: id }
  });

  // Delete the role
  await roleRepository.deleteRole(id);
}

/**
 * Get all permissions
 */
export async function getAllPermissions(): Promise<Permission[]> {
  // Get all permissions
  return prisma.permission.findMany();

  // Note: We don't have a permissionRepository yet, so we're using Prisma directly
}

/**
 * Get a permission by ID
 */
export async function getPermissionById(id: string): Promise<Permission | null> {
  // Get permission by ID
  const permission = await prisma.permission.findUnique({
    where: { id }
  });

  if (!permission) {
    throw new NotFoundError('Permission not found');
  }

  // Note: We don't have a permissionRepository yet, so we're using Prisma directly
  return permission;
}

/**
 * Assign permissions to a role
 */
export async function assignPermissions(roleId: string, permissionIds: string[]) {
  if (!roleId || !permissionIds || !Array.isArray(permissionIds)) {
    throw new BadRequestError('Role ID and permission IDs array are required');
  }

  // Check if role exists
  const role = await roleRepository.getRoleById(roleId);

  if (!role) {
    throw new NotFoundError('Role not found');
  }

  // Verify all permissions exist
  const permissions = await prisma.permission.findMany({
    where: {
      id: { in: permissionIds }
    }
  });

  if (permissions.length !== permissionIds.length) {
    throw new BadRequestError('Some permission IDs are invalid');
  }

  // Create role-permission associations
  const results = await Promise.all(permissionIds.map(async (permissionId) => {
    return prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId,
          permissionId
        }
      },
      update: {},
      create: {
        roleId,
        permissionId
      }
    });
  }));

  return {
    message: 'Permissions assigned successfully',
    roleId,
    permissionsAssigned: results.length
  };
}

/**
 * Get users by role ID
 */
export async function getUsersByRoleId(roleId: string) {
  // Check if role exists
  const role = await roleRepository.getRoleById(roleId);

  if (!role) {
    throw new NotFoundError('Role not found');
  }

  // Get users with this role
  const userRoles = await prisma.userRole.findMany({
    where: { roleId },
    include: { user: true }
  });

  // Format the response
  return userRoles.map((ur: any) => ({
    id: ur.user.id,
    email: ur.user.email,
    fullName: ur.user.fullName,
    assignedAt: ur.assignedAt
  }));
}

/**
 * Assign role to a user
 */
export async function assignRoleToUser(userId: string, roleId: string) {
  // Check if role exists
  const role = await roleRepository.getRoleById(roleId);

  if (!role) {
    throw new NotFoundError('Role not found');
  }

  // Check if user exists
  const user = await prisma.user.findUnique({ where: { id: userId } });

  if (!user) {
    throw new NotFoundError('User not found');
  }

  // Check if user already has this role
  const existingUserRole = await prisma.userRole.findUnique({
    where: {
      userId_roleId: {
        userId,
        roleId
      }
    }
  });

  if (existingUserRole) {
    return {
      message: 'User already has this role',
      userId,
      roleId
    };
  }

  // Assign role to user
  await roleRepository.assignRoleToUser(userId, roleId);

  return {
    message: 'Role assigned to user successfully',
    userId,
    roleId
  };
}

/**
 * Remove role from a user
 */
export async function removeRoleFromUser(userId: string, roleId: string) {
  // Check if role exists
  const role = await roleRepository.getRoleById(roleId);

  if (!role) {
    throw new NotFoundError('Role not found');
  }

  // Check if user exists
  const user = await prisma.user.findUnique({ where: { id: userId } });

  if (!user) {
    throw new NotFoundError('User not found');
  }

  // Check if user has this role
  const existingUserRole = await prisma.userRole.findUnique({
    where: {
      userId_roleId: {
        userId,
        roleId
      }
    }
  });

  if (!existingUserRole) {
    return {
      message: 'User does not have this role',
      userId,
      roleId
    };
  }

  // Remove role from user
  await prisma.userRole.delete({
    where: {
      userId_roleId: {
        userId,
        roleId
      }
    }
  });

  return {
    message: 'Role removed from user successfully',
    userId,
    roleId
  };
}
